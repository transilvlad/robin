/*
 * Webhook Response Format:
 *
 * To override the normal SMTP response, your webhook should return a JSON payload with:
 * {
 *   "smtpResponse": "250 Custom response message"
 * }
 *
 * If no "smtpResponse" is provided:
 * - HTTP 200 OK: Extension will process normally.
 * - HTTP 4xx/5xx: Returns "451 4.3.2 Internal server error" unless ignoreErrors is true.
 *
 * Webhook Payload Format:
 * {
 *   "session": { ... session data ... },
 *   "envelope": { ... envelope data ... },
 *   "verb": {
 *     "command": "MAIL",
 *     "key": "mail",
 *     "params": "FROM:<sender@example.com>"
 *   }
 * }
 */
{
  // Webhook configurations for SMTP extensions.
  // Each extension can have its own webhook configuration.

  // EHLO/HELO/LHLO - Initial connection command.
  "ehlo": {
    // Enable webhook for this extension.
    enabled: false,

    // Webhook endpoint URL.
    url: "http://localhost:8000/webhooks/ehlo",

    // HTTP method (GET, POST, PUT, PATCH, DELETE).
    method: "POST",

    // Timeout in milliseconds.
    timeout: 5000,

    // Wait for webhook response before processing extension.
    waitForResponse: true,

    // Ignore errors and continue processing if webhook fails.
    ignoreErrors: false,

    // Direction filter: "inbound", "outbound", or "both" (default: "both").
    direction: "both",

    // Tip: headers and authValue below are supported via Magic replacement.

    // Authentication type: none, basic, bearer.
    authType: "none",

    // Authentication value (username:password for basic, token for bearer).
    authValue: "",

    // Include session data in payload.
    includeSession: true,

    // Include envelope data in payload.
    includeEnvelope: true,

    // Include verb data in payload.
    includeVerb: true,

    // Custom HTTP headers.
    headers: {
      "X-Custom-Header": "value"
    }
  },

  // STARTTLS - TLS negotiation command.
  "starttls": {
    enabled: false,
    url: "http://localhost:8000/webhooks/starttls",
    method: "POST",
    timeout: 3000,
    waitForResponse: true,
    ignoreErrors: false,
    direction: "both",
    authType: "bearer",
    authValue: "your-api-token-here",
    includeSession: true,
    includeEnvelope: false,
    includeVerb: true,
    headers: {}
  },

  // AUTH - Authentication command.
  "auth": {
    enabled: false,
    url: "http://localhost:8000/webhooks/auth",
    method: "POST",
    timeout: 5000,
    waitForResponse: true,
    ignoreErrors: false,
    direction: "both",
    authType: "basic",
    authValue: "username:password",
    includeSession: true,
    includeEnvelope: false,
    includeVerb: true,
    headers: {
      "X-Service": "auth-validator"
    }
  },

  // MAIL FROM - Sender command.
  "mail": {
    enabled: false,
    url: "http://localhost:8000/webhooks/mail",
    method: "POST",
    timeout: 5000,
    waitForResponse: true,
    ignoreErrors: false,
    direction: "both",
    authType: "none",
    authValue: "",
    includeSession: true,
    includeEnvelope: true,
    includeVerb: true,
    headers: {}
  },

  // RCPT TO - Recipient command.
  "rcpt": {
    enabled: false,
    url: "http://localhost:8000/webhooks/rcpt",
    method: "POST",
    timeout: 5000,
    waitForResponse: true,
    ignoreErrors: false,
    direction: "both",
    authType: "none",
    authValue: "",
    includeSession: true,
    includeEnvelope: true,
    includeVerb: true,
    headers: {}
  },

  // DATA - Message data command.
  "data": {
    enabled: false,
    url: "http://localhost:8000/webhooks/data",
    method: "POST",
    timeout: 10000,
    waitForResponse: true,
    ignoreErrors: false,
    direction: "both",
    authType: "none",
    authValue: "",
    includeSession: true,
    includeEnvelope: true,
    includeVerb: true,
    headers: {}
  },

  // BDAT - Binary data command (CHUNKING).
  "bdat": {
    enabled: false,
    url: "http://localhost:8000/webhooks/bdat",
    method: "POST",
    timeout: 10000,
    waitForResponse: true,
    ignoreErrors: false,
    direction: "both",
    authType: "none",
    authValue: "",
    includeSession: true,
    includeEnvelope: true,
    includeVerb: true,
    headers: {}
  },

  // RAW - Raw message content webhook (called AFTER successful DATA/BDAT).
  "raw": {
    enabled: false,
    url: "http://localhost:8000/webhooks/data/raw",
    method: "POST",
    timeout: 10000,
    waitForResponse: false, // Fire and forget for performance.
    ignoreErrors: true, // Don't fail email delivery if webhook fails.
    direction: "both",
    base64: false, // Set to true to base64 encode email content.
    authType: "bearer",
    authValue: "your-raw-webhook-token",
    headers: {
      "X-Email-Processor": "robin-smtp"
    }
  },

  // RSET - Reset transaction command.
  "rset": {
    enabled: false,
    url: "http://localhost:8000/webhooks/rset",
    method: "POST",
    timeout: 3000,
    waitForResponse: false, // Fire and forget.
    ignoreErrors: true,
    direction: "both",
    authType: "none",
    authValue: "",
    includeSession: true,
    includeEnvelope: false,
    includeVerb: true,
    headers: {}
  },

  // HELP - Help command.
  "help": {
    enabled: false,
    url: "http://localhost:8000/webhooks/help",
    method: "POST",
    timeout: 3000,
    waitForResponse: false,
    ignoreErrors: true,
    direction: "both",
    authType: "none",
    authValue: "",
    includeSession: false,
    includeEnvelope: false,
    includeVerb: true,
    headers: {}
  },

  // QUIT - Connection close command.
  "quit": {
    enabled: false,
    url: "http://localhost:8000/webhooks/quit",
    method: "POST",
    timeout: 3000,
    waitForResponse: false, // Don't wait for response on quit.
    ignoreErrors: true,
    direction: "both",
    authType: "none",
    authValue: "",
    includeSession: true,
    includeEnvelope: true,
    includeVerb: true,
    headers: {}
  },

  // LHLO - LMTP HELO command (same handler as ehlo).
  "lhlo": {
    enabled: false,
    url: "http://localhost:8000/webhooks/lhlo",
    method: "POST",
    timeout: 5000,
    waitForResponse: true,
    ignoreErrors: false,
    direction: "both",
    authType: "none",
    authValue: "",
    includeSession: true,
    includeEnvelope: false,
    includeVerb: true,
    headers: {}
  }
}